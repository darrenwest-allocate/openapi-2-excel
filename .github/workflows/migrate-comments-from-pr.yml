name: Migrate Comments from PR Workbook

on:
  workflow_dispatch:
    inputs:
      openapi_spec_url:
        description: 'URL to the new OpenAPI specification (YAML or JSON)'
        required: true
        type: string

jobs:
  migrate-comments:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Find associated PR for current branch
        id: find-pr
        run: |
          echo "üîç Finding PR for current branch: ${{ github.ref_name }}"
          
          # Find PR number for current branch
          PR_NUMBER=$(gh pr list --head "${{ github.ref_name }}" --json number --jq '.[0].number // empty')
          
          if [ -z "$PR_NUMBER" ]; then
            echo "‚ùå Error: No PR found for branch '${{ github.ref_name }}'"
            echo "Please ensure you're running this workflow from a branch that has an open PR"
            exit 1
          fi
          
          echo "‚úÖ Found PR #$PR_NUMBER for branch '${{ github.ref_name }}'"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Validate source workbook exists
        id: validate-workbook
        run: |
          WORKBOOK_PATH="sourceWorkbook"
          echo "üìÅ Checking for Excel workbooks in $WORKBOOK_PATH/"
          
          # Find Excel files in sourceWorkbook directory
          EXCEL_FILES=$(find "$WORKBOOK_PATH" -name "*.xlsx" -not -name "~*" 2>/dev/null || true)
          
          if [ -z "$EXCEL_FILES" ]; then
            echo "‚ùå Error: No Excel workbook (.xlsx) found in $WORKBOOK_PATH/"
            echo "Please ensure your PR includes an Excel workbook in the sourceWorkbook/ directory"
            exit 1
          fi
          
          # Use the first Excel file found
          WORKBOOK_FILE=$(echo "$EXCEL_FILES" | head -n 1)
          
          echo "‚úÖ Found source workbook: $WORKBOOK_FILE"
          echo "workbook_path=$WORKBOOK_FILE" >> $GITHUB_OUTPUT
          
      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: Restore dependencies
        run: |
          echo "üì¶ Restoring .NET dependencies..."
          dotnet restore
          
      - name: Build solution (Release)
        run: |
          echo "üî® Building solution in Release mode..."
          dotnet build --configuration Release
          
      - name: Create output directory
        run: mkdir -p migration-output
        
      - name: Run comment migration
        run: |
          echo "üöÄ Starting comment migration..."
          echo "üìÇ Source workbook: ${{ steps.validate-workbook.outputs.workbook_path }}"
          echo "üìÑ OpenAPI spec URL: ${{ github.event.inputs.openapi_spec_url }}"
          echo "üìù Output directory: migration-output/"
          
          # Debug: Check current directory and file paths
          echo "üîç Debugging environment:"
          echo "Working directory: $(pwd)"
          echo "Repository root: $(ls -la)"
          echo "Source workbook exists: $(test -f "${{ steps.validate-workbook.outputs.workbook_path }}" && echo "YES" || echo "NO")"
          echo "Output directory exists: $(test -d "migration-output" && echo "YES" || echo "NO")"
          
          # Use absolute paths to avoid any working directory issues
          WORKBOOK_PATH="$(pwd)/${{ steps.validate-workbook.outputs.workbook_path }}"
          OUTPUT_PATH="$(pwd)/migration-output/"
          
          echo "üìç Absolute paths:"
          echo "Source workbook: $WORKBOOK_PATH"
          echo "Output directory: $OUTPUT_PATH"
          echo "Source workbook absolute exists: $(test -f "$WORKBOOK_PATH" && echo "YES" || echo "NO")"
          
          # Test URL accessibility first
          echo "üåê Testing URL accessibility:"
          if curl -f -s -I "${{ github.event.inputs.openapi_spec_url }}" >/dev/null 2>&1; then
            echo "‚úÖ URL is accessible"
          else
            echo "‚ùå URL is not accessible - this may cause CLI to fail"
            curl -I "${{ github.event.inputs.openapi_spec_url }}" || true
          fi
          
          # Run migration with absolute paths
          echo "üöÄ Running CLI with absolute paths..."
          dotnet run --project src/openapi2excel.cli --configuration Release -- \
            "${{ github.event.inputs.openapi_spec_url }}" \
            "$OUTPUT_PATH" \
            --existing-workbook "$WORKBOOK_PATH" \
            --no-logo
          
          echo "‚úÖ Migration completed"
          echo "üìÅ Output directory contents:"
          ls -la migration-output/ || echo "No files in migration-output/"
          
      - name: Upload migrated workbook
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: migrated-workbook-pr-${{ steps.find-pr.outputs.pr_number }}
          path: migration-output/*.xlsx
          retention-days: 30
          
      - name: Check for migration results
        if: always()
        id: check-results
        run: |
          if ls migration-output/*.xlsx 1> /dev/null 2>&1; then
            echo "migration_success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Migration files found"
            ls -la migration-output/
          else
            echo "migration_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå No migration files found"
            echo "üìÅ Migration output directory contents:"
            ls -la migration-output/ || echo "Directory does not exist"
          fi
          
      - name: Comment on PR with results
        if: always()
        run: |
          echo "üí¨ Adding comment to PR #${{ steps.find-pr.outputs.pr_number }}"
          
          if [ "${{ steps.check-results.outputs.migration_success }}" = "true" ]; then
            # Success case
            GENERATED_FILE=$(ls migration-output/*.xlsx 2>/dev/null | head -n 1 | xargs basename || echo "migrated-workbook.xlsx")
            
            COMMENT_BODY="## üéâ Comment Migration Completed!

            Your Excel workbook comments have been successfully migrated to the new OpenAPI specification.

            ### Migration Details
            - **Source Workbook**: \`${{ steps.validate-workbook.outputs.workbook_path }}\`
            - **OpenAPI Spec**: ${{ github.event.inputs.openapi_spec_url }}
            - **Generated File**: \`${GENERATED_FILE}\`
            - **Branch**: \`${{ github.ref_name }}\`
            - **Workflow Run**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### üì• Download Your Migrated Workbook
            The migrated workbook is available as a workflow artifact:
            [Download migrated-workbook-pr-${{ steps.find-pr.outputs.pr_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### üìã Next Steps
            1. Download the artifact from the workflow run
            2. Review the migrated comments in Excel
            3. Verify that all comments have been properly transferred
            4. Close this PR

            ---
            *Generated by OpenAPI-2-Excel Comment Migration Workflow*"
          else
            # Failure case
            COMMENT_BODY="## ‚ùå Comment Migration Failed

            Unfortunately, the comment migration process encountered an error and could not complete successfully.

            ### Migration Details
            - **Source Workbook**: \`${{ steps.validate-workbook.outputs.workbook_path }}\`
            - **OpenAPI Spec**: ${{ github.event.inputs.openapi_spec_url }}
            - **Branch**: \`${{ github.ref_name }}\`
            - **Workflow Run**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### üîç Troubleshooting
            Please check the workflow logs for detailed error information:
            - Verify the OpenAPI URL is accessible: ${{ github.event.inputs.openapi_spec_url }}
            - Ensure the Excel workbook is valid and contains the expected mapping metadata
            - Check for network connectivity issues

            ### üìã Next Steps
            1. Review the workflow logs for specific error details
            2. Verify the OpenAPI specification URL is publicly accessible
            3. Ensure your Excel workbook was generated with the latest version of the tool
            4. Try running the migration again

            ---
            *Generated by OpenAPI-2-Excel Comment Migration Workflow*"
          fi

          gh pr comment ${{ steps.find-pr.outputs.pr_number }} --body "$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload migration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-logs-pr-${{ steps.find-pr.outputs.pr_number }}
          path: migration-output/
          retention-days: 3