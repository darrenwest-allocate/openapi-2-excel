name: Bulk Generate OpenAPI Excel Documentation

on:
  workflow_dispatch:
    inputs:
      openapi_urls:
        description: 'OpenAPI specification URLs (one per line)'
        required: true
        default: |
          https://poc-marketplace.interoperability.allocate-dev.co.uk/ui/docs/openapi/general-api-v1.json
        type: string
      output_prefix:
        description: 'Prefix for output filenames (optional)'
        required: false
        default: ''
        type: string
      max_depth:
        description: 'Maximum depth level for documenting object hierarchies'
        required: false
        default: '10'
        type: string
      include_timestamp:
        description: 'Include timestamp in filename'
        required: false
        default: true
        type: boolean

jobs:
  generate-excel-bulk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build project
      run: dotnet build --no-restore --configuration Release
      
    - name: Create output directory
      run: mkdir -p ./output
      
    - name: Generate Excel documentation for all URLs
      run: |
        echo "Starting bulk generation..."
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        
        # Read URLs line by line
        echo "${{ github.event.inputs.openapi_urls }}" | while IFS= read -r url; do
          # Skip empty lines
          if [ -z "$url" ]; then
            continue
          fi
          
          echo "Processing: $url"
          
          # Determine output path
          if [ "${{ github.event.inputs.include_timestamp }}" = "true" ]; then
            OUTPUT_DIR="./output/${TIMESTAMP}/"
          else
            OUTPUT_DIR="./output/"
          fi
          
          mkdir -p "$OUTPUT_DIR"
          
          # Add prefix if specified
          if [ -n "${{ github.event.inputs.output_prefix }}" ]; then
            # For prefixed files, we'll let the tool auto-generate and then rename
            TEMP_OUTPUT="$OUTPUT_DIR"
          else
            TEMP_OUTPUT="$OUTPUT_DIR"
          fi
          
          # Generate documentation
          if dotnet run --project src/openapi2excel.cli/openapi2excel.cli.csproj \
            --configuration Release \
            -- \
            "$url" \
            "$TEMP_OUTPUT" \
            --depth "${{ github.event.inputs.max_depth }}" \
            --no-logo; then
            
            echo "✅ Successfully generated documentation for: $url"
            
            # Rename file with prefix if specified
            if [ -n "${{ github.event.inputs.output_prefix }}" ]; then
              cd "$OUTPUT_DIR"
              for file in *.xlsx; do
                if [ -f "$file" ]; then
                  mv "$file" "${{ github.event.inputs.output_prefix }}_$file"
                fi
              done
              cd - > /dev/null
            fi
          else
            echo "❌ Failed to generate documentation for: $url"
          fi
          
          echo "---"
        done
      
    - name: List all generated files
      run: |
        echo "Generated files:"
        find ./output -name "*.xlsx" -type f | while read file; do
          echo "📄 $(basename "$file") ($(du -h "$file" | cut -f1))"
        done
      
    - name: Upload all Excel files as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openapi-excel-documentation-bulk
        path: ./output/**/*.xlsx
        retention-days: 30
        
    - name: Create summary
      run: |
        echo "## 📊 Bulk Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- Max Depth: ${{ github.event.inputs.max_depth }}" >> $GITHUB_STEP_SUMMARY
        echo "- Output Prefix: ${{ github.event.inputs.output_prefix }}" >> $GITHUB_STEP_SUMMARY
        echo "- Include Timestamp: ${{ github.event.inputs.include_timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Generated Files:**" >> $GITHUB_STEP_SUMMARY
        find ./output -name "*.xlsx" -type f | while read file; do
          echo "- \`$(basename "$file")\` ($(du -h "$file" | cut -f1))" >> $GITHUB_STEP_SUMMARY
        done
